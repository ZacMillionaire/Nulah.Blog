using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Nulah.Blog.Controllers;
using Nulah.Blog.Filters;
using Nulah.Blog.Models;
using Nulah.LazyCommon.Core.MSSQL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace Nulah.Blog.Areas.User.Contollers {
    [Area("User")]
    public class LoginController : Controller {

        private readonly AppSettings _appSettings;
        private readonly LazyMapper _lazySql;

        public LoginController(AppSettings appSettings, LazyMapper lm) {
            _appSettings = appSettings;
            _lazySql = lm;
        }


        [HttpGet]
        [Route("~/Login")]
        [LoginFilter(UserRole.LoggedOut)]
        public IActionResult Login() {
            return View();
        }

        [HttpPost]
        [Route("~/Login")]
        [ValidateAntiForgeryToken]
        [LoginFilter(UserRole.LoggedOut)]
        public IActionResult Login([FromForm]LoginForm loginFormData) {
            try {
                UserController userController = new UserController(_appSettings, _lazySql);
                userController.SendLoginEmail(loginFormData.Email);

                Response.Redirect("/Login/FromEmail");
            } catch(Exception e) {
                Response.Redirect($"/Login/Error?Reason={e.GetBaseException().Message}");
            }

            return View();
        }

        [HttpGet]
        [Route("~/Login/Error")]
        [LoginFilter(UserRole.LoggedOut)]
        public IActionResult LoginError(string Reason) {
            ViewData["Reason"] = Reason;
            return View();
        }

        [HttpGet]
        [Route("~/Login/FromEmail")]
        [LoginFilter(UserRole.LoggedOut)]
        public IActionResult FromEmail() {
            return View();
        }

        [HttpPost]
        [Route("~/Login/FromEmail")]
        [ValidateAntiForgeryToken]
        [LoginFilter(UserRole.LoggedOut)]
        public async void FromEmail([FromForm]FromEmailLoginForm fromEmailLoginFormData) {

            UserController userController = new UserController(_appSettings, _lazySql);

            Guid sessionToken;

            // Validate the password hash against the database
            try {
                string UA = Request.Headers["User-Agent"];
                sessionToken = userController.Login(fromEmailLoginFormData.Email, fromEmailLoginFormData.Password, UA);
            } catch(Exception e) {
                Response.Redirect($"/Login/Error?Reason={e.GetBaseException().Message}");
                return;
            }

            if(sessionToken == Guid.Empty) {
                throw new Exception($"Strange error, session token generated by login was null");
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, fromEmailLoginFormData.Email),
                new Claim("SessionId",sessionToken.ToString())
            };

            var claimsIdentity = new ClaimsIdentity(
                   claims,
                   CookieAuthenticationDefaults.AuthenticationScheme
                );

            var authProperties = new AuthenticationProperties {
                AllowRefresh = true,
                IsPersistent = true,
                IssuedUtc = DateTime.UtcNow
                //AllowRefresh = <bool>,
                // Refreshing the authentication session should be allowed.

                //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
                // The time at which the authentication ticket expires. A 
                // value set here overrides the ExpireTimeSpan option of 
                // CookieAuthenticationOptions set with AddCookie.

                //IsPersistent = true,
                // Whether the authentication session is persisted across 
                // multiple requests. Required when setting the 
                // ExpireTimeSpan option of CookieAuthenticationOptions 
                // set with AddCookie. Also required when setting 
                // ExpiresUtc.

                //IssuedUtc = <DateTimeOffset>,
                // The time at which the authentication ticket was issued.

                //RedirectUri = <string>
                // The full path or absolute URI to be used as an http 
                // redirect response value.
            };

            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                authProperties);

            Response.Redirect("/Login/Success");
        }

        [HttpGet]
        [Route("~/Login/Success")]
        [LoginFilter(UserRole.LoggedIn)]
        public IActionResult LoginSuccess() {
            return View();
        }

        [HttpGet]
        [Route("~/Logout")]
        [LoginFilter(UserRole.LoggedIn)]
        public async Task<IActionResult> Logout() {
            UserController userController = new UserController(_appSettings, _lazySql);
            if(User.Identity.IsAuthenticated) {
                var sessionClaim = User.Claims.First(x => x.Type == "SessionId");
                userController.Logout(sessionClaim.Value);
                await HttpContext.SignOutAsync();
            }
            return View();
        }

    }

    public class LoginForm {
        public string Email { get; set; }
    }

    public class FromEmailLoginForm {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
